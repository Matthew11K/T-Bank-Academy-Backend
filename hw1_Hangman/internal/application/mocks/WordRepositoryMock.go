// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	domain "github.com/es-debug/backend-academy-2024-go-template/internal/domain"
)

// WordRepository is an autogenerated mock type for the WordRepository type
type WordRepository struct {
	mock.Mock
}

type WordRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *WordRepository) EXPECT() *WordRepository_Expecter {
	return &WordRepository_Expecter{mock: &_m.Mock}
}

// GetRandomWord provides a mock function with given fields: category, difficulty
func (_m *WordRepository) GetRandomWord(category string, difficulty string) (*domain.Word, error) {
	ret := _m.Called(category, difficulty)

	if len(ret) == 0 {
		panic("no return value specified for GetRandomWord")
	}

	var r0 *domain.Word
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.Word, error)); ok {
		return rf(category, difficulty)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.Word); ok {
		r0 = rf(category, difficulty)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Word)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(category, difficulty)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WordRepository_GetRandomWord_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomWord'
type WordRepository_GetRandomWord_Call struct {
	*mock.Call
}

// GetRandomWord is a helper method to define mock.On call
//   - category string
//   - difficulty string
func (_e *WordRepository_Expecter) GetRandomWord(category interface{}, difficulty interface{}) *WordRepository_GetRandomWord_Call {
	return &WordRepository_GetRandomWord_Call{Call: _e.mock.On("GetRandomWord", category, difficulty)}
}

func (_c *WordRepository_GetRandomWord_Call) Run(run func(category string, difficulty string)) *WordRepository_GetRandomWord_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *WordRepository_GetRandomWord_Call) Return(_a0 *domain.Word, _a1 error) *WordRepository_GetRandomWord_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *WordRepository_GetRandomWord_Call) RunAndReturn(run func(string, string) (*domain.Word, error)) *WordRepository_GetRandomWord_Call {
	_c.Call.Return(run)
	return _c
}

// NewWordRepository creates a new instance of WordRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWordRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *WordRepository {
	mock := &WordRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
