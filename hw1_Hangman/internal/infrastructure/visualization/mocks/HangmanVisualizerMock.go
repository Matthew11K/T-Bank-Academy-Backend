// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// HangmanVisualizer is an autogenerated mock type for the HangmanVisualizer type
type HangmanVisualizer struct {
	mock.Mock
}

type HangmanVisualizer_Expecter struct {
	mock *mock.Mock
}

func (_m *HangmanVisualizer) EXPECT() *HangmanVisualizer_Expecter {
	return &HangmanVisualizer_Expecter{mock: &_m.Mock}
}

// DisplayHangman provides a mock function with given fields: attemptsLeft, maxAttempts
func (_m *HangmanVisualizer) DisplayHangman(attemptsLeft int, maxAttempts int) {
	_m.Called(attemptsLeft, maxAttempts)
}

// HangmanVisualizer_DisplayHangman_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisplayHangman'
type HangmanVisualizer_DisplayHangman_Call struct {
	*mock.Call
}

// DisplayHangman is a helper method to define mock.On call
//   - attemptsLeft int
//   - maxAttempts int
func (_e *HangmanVisualizer_Expecter) DisplayHangman(attemptsLeft interface{}, maxAttempts interface{}) *HangmanVisualizer_DisplayHangman_Call {
	return &HangmanVisualizer_DisplayHangman_Call{Call: _e.mock.On("DisplayHangman", attemptsLeft, maxAttempts)}
}

func (_c *HangmanVisualizer_DisplayHangman_Call) Run(run func(attemptsLeft int, maxAttempts int)) *HangmanVisualizer_DisplayHangman_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *HangmanVisualizer_DisplayHangman_Call) Return() *HangmanVisualizer_DisplayHangman_Call {
	_c.Call.Return()
	return _c
}

func (_c *HangmanVisualizer_DisplayHangman_Call) RunAndReturn(run func(int, int)) *HangmanVisualizer_DisplayHangman_Call {
	_c.Call.Return(run)
	return _c
}

// NewHangmanVisualizer creates a new instance of HangmanVisualizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHangmanVisualizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *HangmanVisualizer {
	mock := &HangmanVisualizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
