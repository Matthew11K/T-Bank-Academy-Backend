// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	domain "github.com/central-university-dev/backend_academy_2024_project_2-go-Matthew11K/internal/domain"
)

// MazeGenerator is an autogenerated mock type for the MazeGenerator type
type MazeGenerator struct {
	mock.Mock
}

type MazeGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MazeGenerator) EXPECT() *MazeGenerator_Expecter {
	return &MazeGenerator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: height, width, swampFreq, sandFreq, coinFreq
func (_m *MazeGenerator) Generate(height int, width int, swampFreq float64, sandFreq float64, coinFreq float64) (*domain.Maze, error) {
	ret := _m.Called(height, width, swampFreq, sandFreq, coinFreq)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 *domain.Maze
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, float64, float64, float64) (*domain.Maze, error)); ok {
		return rf(height, width, swampFreq, sandFreq, coinFreq)
	}
	if rf, ok := ret.Get(0).(func(int, int, float64, float64, float64) *domain.Maze); ok {
		r0 = rf(height, width, swampFreq, sandFreq, coinFreq)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Maze)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, float64, float64, float64) error); ok {
		r1 = rf(height, width, swampFreq, sandFreq, coinFreq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MazeGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MazeGenerator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - height int
//   - width int
//   - swampFreq float64
//   - sandFreq float64
//   - coinFreq float64
func (_e *MazeGenerator_Expecter) Generate(height interface{}, width interface{}, swampFreq interface{}, sandFreq interface{}, coinFreq interface{}) *MazeGenerator_Generate_Call {
	return &MazeGenerator_Generate_Call{Call: _e.mock.On("Generate", height, width, swampFreq, sandFreq, coinFreq)}
}

func (_c *MazeGenerator_Generate_Call) Run(run func(height int, width int, swampFreq float64, sandFreq float64, coinFreq float64)) *MazeGenerator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(float64), args[3].(float64), args[4].(float64))
	})
	return _c
}

func (_c *MazeGenerator_Generate_Call) Return(_a0 *domain.Maze, _a1 error) *MazeGenerator_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MazeGenerator_Generate_Call) RunAndReturn(run func(int, int, float64, float64, float64) (*domain.Maze, error)) *MazeGenerator_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMazeGenerator creates a new instance of MazeGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMazeGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MazeGenerator {
	mock := &MazeGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
