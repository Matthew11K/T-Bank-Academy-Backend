// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	domain "github.com/central-university-dev/backend_academy_2024_project_2-go-Matthew11K/internal/domain"
)

// MazeSolver is an autogenerated mock type for the MazeSolver type
type MazeSolver struct {
	mock.Mock
}

type MazeSolver_Expecter struct {
	mock *mock.Mock
}

func (_m *MazeSolver) EXPECT() *MazeSolver_Expecter {
	return &MazeSolver_Expecter{mock: &_m.Mock}
}

// Solve provides a mock function with given fields: maze, start, end
func (_m *MazeSolver) Solve(maze *domain.Maze, start domain.Coordinate, end domain.Coordinate) ([]domain.Coordinate, error) {
	ret := _m.Called(maze, start, end)

	if len(ret) == 0 {
		panic("no return value specified for Solve")
	}

	var r0 []domain.Coordinate
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Maze, domain.Coordinate, domain.Coordinate) ([]domain.Coordinate, error)); ok {
		return rf(maze, start, end)
	}
	if rf, ok := ret.Get(0).(func(*domain.Maze, domain.Coordinate, domain.Coordinate) []domain.Coordinate); ok {
		r0 = rf(maze, start, end)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Coordinate)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.Maze, domain.Coordinate, domain.Coordinate) error); ok {
		r1 = rf(maze, start, end)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MazeSolver_Solve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Solve'
type MazeSolver_Solve_Call struct {
	*mock.Call
}

// Solve is a helper method to define mock.On call
//   - maze *domain.Maze
//   - start domain.Coordinate
//   - end domain.Coordinate
func (_e *MazeSolver_Expecter) Solve(maze interface{}, start interface{}, end interface{}) *MazeSolver_Solve_Call {
	return &MazeSolver_Solve_Call{Call: _e.mock.On("Solve", maze, start, end)}
}

func (_c *MazeSolver_Solve_Call) Run(run func(maze *domain.Maze, start domain.Coordinate, end domain.Coordinate)) *MazeSolver_Solve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*domain.Maze), args[1].(domain.Coordinate), args[2].(domain.Coordinate))
	})
	return _c
}

func (_c *MazeSolver_Solve_Call) Return(_a0 []domain.Coordinate, _a1 error) *MazeSolver_Solve_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MazeSolver_Solve_Call) RunAndReturn(run func(*domain.Maze, domain.Coordinate, domain.Coordinate) ([]domain.Coordinate, error)) *MazeSolver_Solve_Call {
	_c.Call.Return(run)
	return _c
}

// NewMazeSolver creates a new instance of MazeSolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMazeSolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MazeSolver {
	mock := &MazeSolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
