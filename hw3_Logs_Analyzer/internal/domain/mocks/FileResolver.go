// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// FileResolver is an autogenerated mock type for the FileResolver type
type FileResolver struct {
	mock.Mock
}

// ResolveFiles provides a mock function with given fields: pattern
func (_m *FileResolver) ResolveFiles(pattern string) ([]string, error) {
	ret := _m.Called(pattern)

	if len(ret) == 0 {
		panic("no return value specified for ResolveFiles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]string, error)); ok {
		return rf(pattern)
	}
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(pattern)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pattern)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFileResolver creates a new instance of FileResolver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileResolver(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileResolver {
	mock := &FileResolver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
