// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	domain "github.com/central-university-dev/backend_academy_2024_project_3-go-Matthew11K/internal/domain"
)

// LogReader is an autogenerated mock type for the LogReader type
type LogReader struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *LogReader) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Scanner provides a mock function with given fields:
func (_m *LogReader) Scanner() (domain.Scanner, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Scanner")
	}

	var r0 domain.Scanner
	var r1 error
	if rf, ok := ret.Get(0).(func() (domain.Scanner, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() domain.Scanner); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.Scanner)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Source provides a mock function with given fields:
func (_m *LogReader) Source() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Source")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewLogReader creates a new instance of LogReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogReader {
	mock := &LogReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
