// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/central-university-dev/backend_academy_2024_project_3-go-Matthew11K/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ReaderFactory is an autogenerated mock type for the ReaderFactory type
type ReaderFactory struct {
	mock.Mock
}

// NewReader provides a mock function with given fields: source
func (_m *ReaderFactory) NewReader(source string) (domain.LogReader, error) {
	ret := _m.Called(source)

	if len(ret) == 0 {
		panic("no return value specified for NewReader")
	}

	var r0 domain.LogReader
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.LogReader, error)); ok {
		return rf(source)
	}
	if rf, ok := ret.Get(0).(func(string) domain.LogReader); ok {
		r0 = rf(source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.LogReader)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(source)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReaderFactory creates a new instance of ReaderFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReaderFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReaderFactory {
	mock := &ReaderFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
